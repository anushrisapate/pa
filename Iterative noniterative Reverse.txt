//Iterative noniterative Reverse
//WriteaniterativeReverse()functionthatreversesalistbyrearrangingall
//thenextpointersandtheheadpointer.Ideally,Reverse()shouldonlyneedto
//makeonepassofthelist


#include <stdio.h>
#include <stdlib.h>

// Node structure for a singly linked list
typedef struct Node {
    int data;
    struct Node* next;
} Node;

// Function to create a new node
Node* createNode(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

// Function to print the linked list
void printList(Node* head) {
    Node* current = head;
    while (current != NULL) {
        printf("%d ", current->data);
        current = current->next;
    }
    printf("\n");
}

// Function to reverse a linked list iteratively
void iterativeReverse(Node** head) {
    Node* prev = NULL;
    Node* current = *head;
    Node* nextNode;

    while (current != NULL) {
        nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    *head = prev;
}

// Function to free the memory allocated for the linked list
void freeList(Node* head) {
    Node* current = head;
    Node* nextNode;

    while (current != NULL) {
        nextNode = current->next;
        free(current);
        current = nextNode;
    }
}

// Function to add a node to the end of the linked list
void appendNode(Node** head, int data) {
    Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
    } else {
        Node* current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}

int main() {
    Node* head = NULL;
    int n, data;

    // Input from the user to create the linked list
    printf("Enter the number of nodes: ");
    scanf("%d", &n);

    for (int i = 0; i < n; i++) {
        printf("Enter the data for node %d: ", i + 1);
        scanf("%d", &data);
        appendNode(&head, data);
    }

    printf("\nOriginal List: ");
    printList(head);

    // Reverse the linked list
    iterativeReverse(&head);

    printf("Reversed List: ");
    printList(head);

    // Free the memory allocated for the linked list
    freeList(head);

    return 0;
}
