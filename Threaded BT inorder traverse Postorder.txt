//Threaded BT inorder traverse Postorder
#include <stdio.h>
#include <stdlib.h>

// Node structure for the threaded binary tree
struct Node {
    int data;
    struct Node *left, *right;
    int isThreaded; // Flag to indicate whether right pointer is a thread or a normal pointer
};

// Function to create a new node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->left = newNode->right = NULL;
    newNode->isThreaded = 0;
    return newNode;
}

// Function to perform inorder threading of the binary tree
void createThreadedBinaryTree(struct Node* root, struct Node** prev) {
    if (root) {
        // Recursively convert the left subtree
        createThreadedBinaryTree(root->left, prev);

        // If the left child is NULL, thread it to the previous node
        if (*prev != NULL) {
            (*prev)->right = root;
            (*prev)->isThreaded = 1;
        }

        // Update the previous node
        *prev = root;

        // Recursively convert the right subtree
        createThreadedBinaryTree(root->right, prev);
    }
}

// Function to traverse the threaded binary tree in postorder
void traversePostorder(struct Node* root) {
    struct Node* prev = NULL;

    while (root != NULL) {
        if (root->isThreaded || prev == root->right) {
            // If the right child is a thread or has been visited, visit the current node
            printf("%d ", root->data);
            prev = root;
            root = NULL; // Move to the next unvisited node
        } else {
            // Otherwise, move to the right child
            root = root->right;
        }
    }
}

int main() {
    struct Node* root = NULL;
    struct Node* prev = NULL;

    // Taking user input to build the binary tree
    int n;
    printf("Enter the number of nodes in the binary tree: ");
    scanf("%d", &n);

    printf("Enter the values of the nodes:\n");
    for (int i = 0; i < n; i++) {
        int value;
        scanf("%d", &value);
        if (root == NULL) {
            root = createNode(value);
            prev = root;
        } else {
            struct Node* newNode = createNode(value);
            if (value < prev->data) {
                prev->left = newNode;
            } else {
                prev->right = newNode;
            }
            prev = newNode;
        }
    }

    // Create the threaded binary tree
    createThreadedBinaryTree(root, &prev);

    // Traverse the threaded binary tree in postorder
    printf("Postorder traversal of the threaded binary tree: ");
    traversePostorder(root);
    printf("\n");

    return 0;
}
