// Infix to Prefix conversion


#include <stdio.h>
#include <stdlib.h>
#include <string.h>


char stack[100], infix[100], postfix[100], prefix[100];
int top = -1;


void push(char x)
{
    if(top==100)
    {
        printf("\n Stack is full");   
    }
    else
    {
        stack[++top] = x;
    }
}


char pop()
{
    if(top == -1)
    {
        printf("\n Stack is empty");
    }
    else
    {
        char val = stack[top];
        top--;
        return val;
    }
}


int precedence(char a)
{
    if(a=='^' || a=='%')
        return 3;
    else if(a=='*' || a=='/')
        return 2;
    else if(a=='+' || a=='-')
        return 1;
    else
        return 0;
}


void inToPost(char* infix)
{
    printf("\n");
    int i,j;
    char symbol, temp;
    for(i=0,j=0; i<=strlen(infix); i++)
    {
        symbol = infix[i];
        switch(symbol)
        {
            case '(':
            push(symbol);
            break;
            
            case '+':
            case '-':
            case '*':
            case '/':
            case '%':
            case '^':
            while(precedence(symbol) <= precedence(stack[top]))
            {
                temp = pop();
                postfix[j++]=temp; 
            }
            push(symbol);
            break;
            
            case ')':
            while((stack[top]) != '(')
            {
                temp = pop();
                postfix[j++]=temp;
            }
            break;
            
            default: postfix[j++] = symbol;
        }
    }
    postfix[j] = '\0';
}


void inToPre(char* infix)
{
    char in_rev[100];
    int i,j;
    for(i=strlen(infix)-1,j=0; i>=0; i--,j++)
    {
        in_rev[j] = infix[i];
    }
    
    for(i=0; i<strlen(in_rev); i++)
    {
        if(in_rev[i]=='(')
            in_rev[i] = ')';
        else if(in_rev[i]==')')
            in_rev[i] = '(';
    }
    
    inToPost(in_rev);
    
    for(i=strlen(postfix)-1,j=0; i>=0; i--,j++)
    {
        prefix[j] = postfix[i];
    }
    prefix[j] = '\0';
    
    printf("\n");
    for(i=0; i<strlen(prefix); i++)
    {
        printf("%c",prefix[i]);
    }
}


void main()
{
    printf("\n Enter an algebraic expression without spaces: ");
    scanf("%s",infix);
    inToPre(infix);
}
