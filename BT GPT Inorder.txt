BT GPT User
Write a Program to create a Binary Tree and perform
following nonrecursive operations on it. a. inorder
Traversal; b. Count no. of nodes on longest path; c.
display tree levelwise; d. Display height of a tree.t

#include <stdio.h>
#include <stdlib.h>

// Node structure for the binary tree
struct Node {
    int data;
    struct Node *left, *right;
};

// Function to create a new node
struct Node *createNode(int value) {
    struct Node *newNode = (struct Node *)malloc(sizeof(struct Node));
    newNode->data = value;
    newNode->left = newNode->right = NULL;
    return newNode;
}

// Function to perform non-recursive inorder traversal
void inorderTraversal(struct Node *root) {
    if (root == NULL)
        return;

    struct Node *stack[100];
    int top = -1;

    while (root || top >= 0) {
        while (root) {
            stack[++top] = root;
            root = root->left;
        }

        root = stack[top--];
        printf("%d ", root->data);

        root = root->right;
    }
}

// Function to count the number of nodes on the longest path
int countNodesOnLongestPath(struct Node *root) {
    if (root == NULL)
        return 0;

    struct Node *stack[100];
    int top = -1;
    int count = 0;
    int maxCount = 0;

    while (root || top >= 0) {
        while (root) {
            stack[++top] = root;
            count++;
            root = root->left;
        }

        root = stack[top--];

        if (count > maxCount)
            maxCount = count;

        count = 0;

        root = root->right;
    }

    return maxCount;
}

// Function to display the tree levelwise
void displayLevelwise(struct Node *root) {
    if (root == NULL)
        return;

    struct Node *queue[100];
    int front = -1, rear = -1;

    queue[++rear] = root;

    while (front != rear) {
        struct Node *current = queue[++front];
        printf("%d ", current->data);

        if (current->left)
            queue[++rear] = current->left;

        if (current->right)
            queue[++rear] = current->right;
    }

    printf("\n");
}

// Function to display the height of the tree
int treeHeight(struct Node *root) {
    if (root == NULL)
        return 0;

    struct Node *stack[100];
    int top = -1;
    int height = 0;

    while (root || top >= 0) {
        while (root) {
            stack[++top] = root;
            root = root->left;
        }

        root = stack[top--];

        if (root->right)
            stack[++top] = root->right;

        height++;
    }

    return height;
}

int main() {
    struct Node *root = NULL;
    int choice, value;

    do {
        printf("\nBinary Tree Operations:\n");
        printf("1. Insert\n");
        printf("2. Inorder Traversal\n");
        printf("3. Count Nodes on Longest Path\n");
        printf("4. Display Tree Levelwise\n");
        printf("5. Display Height of Tree\n");
        printf("6. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter the value to insert: ");
                scanf("%d", &value);
                if (root == NULL)
                    root = createNode(value);
                else
                    insert(root, value);
                break;

            case 2:
                printf("Inorder Traversal: ");
                inorderTraversal(root);
                printf("\n");
                break;

            case 3:
                printf("Count of Nodes on Longest Path: %d\n", countNodesOnLongestPath(root));
                break;

            case 4:
                printf("Displaying Tree Levelwise:\n");
                displayLevelwise(root);
                break;

            case 5:
                printf("Height of Tree: %d\n", treeHeight(root));
                break;

            case 6:
                printf("Exiting program.\n");
                break;

            default:
                printf("Invalid choice. Please try again.\n");
        }
    } while (choice != 6);

    return 0;
}
