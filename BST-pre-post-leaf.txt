#include<stdio.h>
#include<conio.h>
#include<stdlib.h>
struct BST
{
    int d, v;
    struct BST *lp, *rp;
};

struct BST *getNode()
{
   struct BST *n;
   n=(struct BST*)malloc(sizeof(struct BST));
   n->lp=n->rp=NULL;
   printf("\nenter node: ");
   scanf("%d", &n->d);
   return (n);
}

void insert(struct BST *r, struct BST *n)
{
    while(1)
     {
        if(r->d>n->d)
          {
            if(r->lp==NULL)
            {
               r->lp=n;
               break;
            }
            else
            {
                r=r->lp;
            }
          }
        else
            {
              if(r->d<n->d)
                  {
                    if(r->rp==NULL)
                     {
                       r->rp=n;
                       break;
                     }
                    else
                     {
                        r=r->rp;
                     }
                  }
                else
                {
                    printf("\n duplicate node found.insertion not possible");
                    free(n);
                    break;
                }
            }
     }
}

void preOrder(struct BST *r)
{

    struct BST *st[20];
    int flag=0,eflag=0;
    int top=-1;

    do
     {
        flag=0;
        while(r!=NULL)
         {
            printf("\n %d", r->d);
            top++;
            st[top]=r;
            r=r->lp;
         }

         do
         {

             if(top==-1)
             {
                 eflag=1;
                 break;
             }
             else
             {
               r=st[top];
               top--;
               if(r->rp!=NULL)
                {
                    r=r->rp;
                    flag=1;
                }
             }
         }while(flag==0);
      }while(eflag==0);
}



void inOrder(struct BST *r)
{
    struct BST *st[20];
    int eflag=0,flag=0;
    int top=-1;
   do
    {
       flag=0;
      while(r!=NULL)
      {
        top++;
        st[top]=r;
        r=r->lp;
      }
      do
      {
        if(top==-1)
        {
            eflag=1;
            break;
        }
        else
        {
            r=st[top];
            top--;
            printf("\n%d", r->d);

            if(r->rp!=NULL)
            {
                r=r->rp;
                flag=1;
            }
        }
      }while(flag==0);
    }while(eflag==0);
}

void leaf(struct BST *r)
{
    struct BST *st[20];
    int eflag=0,flag=0;
    int top=-1;
    int cnt=0;

    do
    {
       flag=0;
      while(r!=NULL)
      {
        if(r->lp==NULL && r->rp==NULL)
        {
            printf("%d ",r->d);
            cnt++;
        }
        top++;
        st[top]=r;
        r=r->lp;
      }
      do
      {
        if(top==-1)
        {
            eflag=1;
            break;
        }
        else
        {
            r=st[top];
            top--;
            printf("\n%d", r->d);

            if(r->rp!=NULL)
            {
                r=r->rp;
                flag=1;
            }
        }
      }while(flag==0);
    }while(eflag==0);
 printf("\no of leaf nodes: %d",cnt);
}

void mirror(struct BST *r)
{
    struct BST *st[20], *t, *v;
    int top=-1, flag=0,eflag=0;

    do
    {
        flag=0;
        while(r!=NULL)
        {
            r->v=1;
            top++;
            st[top]=r;
            r=r->lp;
        }
        do
        {
            if(top==-1)
            {
                eflag=1;
                break;
            }
            else
            {
                r=st[top];
                top--;
                if(r->v==1)
                {
                    r->v=2;
                    top++;
                    st[top]=r;
                    r=r->rp;
                    flag=1;
                }
                else{
                    t=r->lp;
                    r->lp=r->rp;
                    r->rp=t;
                }
            }
        }while(flag==0);
    }while(eflag==0);
}
void postOrder(struct BST *r)
{
  int flag=0,eflag=0,top=-1;
  struct BST *st[20];

  do
  {
      flag=0;
      while(r!=NULL)
      {
          r->v=1;
          top++;
          st[top]=r;
          r=r->lp;
      }
      do
      {
        if(top==-1)
        {
            eflag=1;
            break;
        }
        else
        {
            r=st[top];
            top--;
            if(r->v==1)
            {
                r->v=2;
                top++;
                st[top]=r;
                r=r->rp;
                flag=1;
            }
            else
            {
                printf("\n%d", r->d);
            }
        }

      }while(flag==0);
  }while(eflag==0);
}


void main()
{

    int ch,cont;
    struct BST *r, *n;
    r=NULL;

    do
    {

 
        printf("\n\n\t\tMenu\n\t1.insert\n\t2.preorder\n\t3.inorder\n\t4.count no of leaf nodes\n\t5.mirror\n\t6.exit\n\n\t\tenter ch:");
        scanf("%d" ,&ch);
         switch(ch)
         {
           case 1:
             do
             {
                 n=getNode();
                 if(r==NULL)
                 {
                     r=n;
                 }
                 else
                   insert(r,n);
                printf("\ncontinue(1:yes): ");
                scanf("%d", &cont);
             }while(cont==1);
            break;

           case 2:
               printf("\nPreorder: ");
            preOrder(r);
           break;
           case 3:
               printf("\ninorder: ");
            inOrder(r);
           break;

           case 4:
            printf("\nno of leaf nodes: ");
            leaf(r);

            break;
             case 5:
               printf("\nlmirror display: ");
            preOrder(r);
            printf("\n | ");
            mirror(r);
            preOrder(r);
            mirror(r);
           break;


           case 6:
            printf("\ncommimg out");
            default :printf("\nwrong ch");

         }
    getch();
    }while(ch!=6);
}

